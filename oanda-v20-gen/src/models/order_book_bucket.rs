/*
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderBookBucket : The order book data for a partition of the instrument's prices.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderBookBucket {
    /// The lowest price (inclusive) covered by the bucket. The bucket covers the price range from the price to price + the order book's bucketWidth.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    /// The percentage of the total number of orders represented by the long orders found in this bucket.
    #[serde(rename = "longCountPercent", skip_serializing_if = "Option::is_none")]
    pub long_count_percent: Option<f64>,
    /// The percentage of the total number of orders represented by the short orders found in this bucket.
    #[serde(rename = "shortCountPercent", skip_serializing_if = "Option::is_none")]
    pub short_count_percent: Option<f64>,
}

impl OrderBookBucket {
    /// The order book data for a partition of the instrument's prices.
    pub fn new() -> OrderBookBucket {
        OrderBookBucket {
            price: None,
            long_count_percent: None,
            short_count_percent: None,
        }
    }
}

