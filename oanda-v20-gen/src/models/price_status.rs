/*
 * OANDA v20 API
 *
 * The full OANDA v20 API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PriceStatus : Status of the price in terms of tradability
/// Status of the price in terms of tradability
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PriceStatus {
    #[serde(rename = "tradeable")]
    Tradeable,
    #[serde(rename = "non-tradeable")]
    NonTradeable,
    #[serde(rename = "invalid")]
    Invalid,

}

impl std::fmt::Display for PriceStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Tradeable => write!(f, "tradeable"),
            Self::NonTradeable => write!(f, "non-tradeable"),
            Self::Invalid => write!(f, "invalid"),
        }
    }
}

impl Default for PriceStatus {
    fn default() -> PriceStatus {
        Self::Tradeable
    }
}

